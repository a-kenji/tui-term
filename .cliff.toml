# configuration file for git-cliff
# see https://github.com/orhun/git-cliff#configuration-file

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - *({{commit.scope}})* {{ commit.message | upper_first }}{% if commit.breaking %} [**breaking**]{% endif %}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - *(uncategorized)* {{ commit.message | upper_first }}{% if commit.breaking %} [**breaking**]{% endif %}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/tui-rs-revival/ratatui/issues/${2}))"},
    { pattern = '(better safe shared layout cache)', replace = "perf(layout): ${1}" },
    { pattern = '(Clarify README.md)', replace = "docs(readme): ${1}" },
    { pattern = '(Update README.md)', replace = "docs(readme): ${1}" },
    { pattern = '(fix typos|Fix typos)', replace = "fix: ${1}" }
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 00 -->Features"},
    { message = "^[fF]ix", group = "<!-- 01 -->Bug Fixes"},
    { message = "^refactor", group = "<!-- 02 -->Refactor"},
    { message = "^doc", group = "<!-- 03 -->Documentation"},
    { message = "^perf", group = "<!-- 04 -->Performance"},
    { message = "^style", group = "<!-- 05 -->Styling"},
    { message = "^test", group = "<!-- 06 -->Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^chore\\(pr\\)", skip = true},
    { message = "^chore\\(pull\\)", skip = true},
    { message = "^chore", group = "<!-- 07 -->Miscellaneous Tasks"},
    { body = ".*security", group = "<!-- 08 -->Security"},
    { message = "^build", group = "<!-- 09 -->Build"},
    { message = "^ci", group = "<!-- 10 -->Continuous Integration"},
    { message = "^revert", group = "<!-- 11 -->Reverted Commits"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-rc.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
